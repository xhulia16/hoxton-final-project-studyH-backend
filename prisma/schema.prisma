// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Class {
  id        Int        @id @default(autoincrement())
  name      String
  pupils    Pupil[]
  teachers  Teacher[]
  exercises Exercise[]
}

model Pupil {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  image            String
  score            Int
  class            Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId          Int
  answers          Answer[]
  comments         Comment[]
  sentMessages     Dm[]      @relation("sender")
  recievedMessages Dm[]      @relation("reciever")
}

model Teacher {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  image     String
  class     Class      @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId   Int
  exercises Exercise[]
}

model Exercise {
  id           Int       @id @default(autoincrement())
  exercise     String
  answer       String
  alternative1 String
  alternative2 String
  alternative3 String
  alternative4 String
  time         DateTime  @default(now())
  teacher      Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId    Int
  class        Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId      Int
  answers      Answer[]
  comments     Comment[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  pupil      Pupil    @relation(fields: [pupilId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment    String
  pupilId    Int
  exerciseId Int
}

model Answer {
  id         Int      @id @default(autoincrement())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pupil      Pupil    @relation(fields: [pupilId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answer     String
  exerciseId Int
  pupilId    Int
}

model Dm{
  id         Int    @id @default(autoincrement())
  message    String
  sender     Pupil  @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   Int
  reciever   Pupil  @relation(name: "reciever", fields: [recieverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recieverId Int
  time DateTime @default(now())
}
